import React from 'react';
import { render, act } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { SuggestionsList } from '../suggestionsList';

jest.mock('../../hooks/useGeolocationDetails', () => ({
  useGeolocationDetails: jest.fn(() => ({
    postalCode: '12345',
    isLoading: false,
    clearPlaceDetails: jest.fn(),
  })),
}));

jest.mock('../modal', () => {
  return {
    Modal: ({ isOpen, onClose, title, subtitle, content, acceptBtn }) => (
      isOpen && (
        <div data-testid="modal">
          <div data-testid="modal-title">{title}</div>
          <div data-testid="modal-subtitle">{subtitle}</div>
          <div data-testid="modal-content">{content}</div>
          <button data-testid="modal-accept-btn" onClick={onClose}>{acceptBtn}</button>
        </div>
      )
    ),
  };
});

const suggestions = [
  {
    place_id: '1',
    structured_formatting: {
      main_text: 'Main Text 1',
      secondary_text: 'Secondary Text 1',
    },
  },
  {
    place_id: '2',
    structured_formatting: {
      main_text: 'Main Text 2',
      secondary_text: 'Secondary Text 2',
    },
  },
];

describe('SuggestionsList', () => {
  it('renders the SuggestionsList component with suggestions', () => {
    const { getByText, getByTestId } = render(<SuggestionsList suggestions={suggestions} />);
    
    suggestions.forEach((suggestion, index) => {
      expect(getByText(`Main Text ${index + 1}`)).toBeInTheDocument();
      expect(getByText(`Secondary Text ${index + 1}`)).toBeInTheDocument();
    });

    // Click on a suggestion
    userEvent.click(getByText('Main Text 1'));

    // Check if the modal is open
    expect(getByTestId('modal-title')).toBeInTheDocument();
    expect(getByTestId('modal-subtitle')).toBeInTheDocument();
    expect(getByTestId('modal-content')).toBeInTheDocument();
    expect(getByTestId('modal-accept-btn')).toBeInTheDocument();
  });

  it('renders the SuggestionsList component with no suggestions', () => {
    const { queryByText, getByTestId } = render(<SuggestionsList suggestions={[]} />);
    
    // Check if no suggestions are rendered
    expect(queryByText('Main Text 1')).toBeNull();
    expect(queryByText('Secondary Text 1')).toBeNull();

    // Check if no modal is open
    expect(queryByTestId('modal-title')).toBeNull();
    expect(queryByTestId('modal-subtitle')).toBeNull();
    expect(queryByTestId('modal-content')).toBeNull();
    expect(queryByTestId('modal-accept-btn')).toBeNull();
  });
});
